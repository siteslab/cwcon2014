<?php
/**
 * @file
 * Code for the custom reviewers views
 */


/**
 * Implements hook_menu().
 */
function reviewer_views_menu() {

  $items['user/%user/review'] = array(
    'title' => 'Pending Reviews',
    'page callback' => 'reviewer_views_personal_view',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_reviewer_views_personal_tab_access',
    'access arguments' => array(1),
    'weight' => 1,
    'file' => 'reviewer_views.pages.inc',
  );

  $items['user/%user/peer-review'] = array(
    'title' => 'Pending Peer Reviews',
    'page callback' => 'reviewer_peer_views_personal_view',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_reviewer_peer_reviews_personal_tab_access',
    'access arguments' => array(1),
    'weight' => 1,
    'file' => 'reviewer_views.pages.inc',
  );

  $items['reviews-dashboard'] = array(
    'title' => 'Reviews Dashboard',
    'page callback' => 'reviewer_views_dashboard_view',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => '_reviewer_views_dashboard_access',
    'weight' => 2,
    'file' => 'reviewer_views.pages.inc',
  );

  $items['peer-reviews-dashboard'] = array(
    'title' => 'Peer Reviews Dashboard',
    'page callback' => 'reviewer_peer_reviews_dashboard_view',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => '_reviewer_views_dashboard_access',
    'weight' => 2,
    'file' => 'reviewer_views.pages.inc',
  );

  return $items;
}

/**
 * Menu access callback for a reviewer's review dashboard.
 *
 * @param $account
 *   The user object of the user whose review is to be viewed.
 */
function _reviewer_views_personal_tab_access($account) {
  global $user;

  // If not a reviewer or not looking at own page
  if (!in_array('reviewer', $user->roles) || $account->uid != $user->uid) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Menu access callback for a peer reviewer's review dashboard.
 *
 * @param $account
 *   The user object of the user whose review is to be viewed.
 */
function _reviewer_peer_reviews_personal_tab_access($account) {
  global $user;

  // If not a peer reviewer or not looking at own page
  if (!in_array('peer reviewer', $user->roles) || $account->uid != $user->uid) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Menu access callback for a admin's review dashboard.
 *
 * @param $account
 *   The user object of the user whose review is to be viewed.
 */
function _reviewer_views_dashboard_access() {
  global $user;

  // If an admin or conference organizer
  $intersection = array_intersect(array('administrator', 'org'), $user->roles);
  if (!empty($intersection)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * @param $peer_review
 *  peer review entity
 */
function _peer_review_has_been_reviews($peer_review) {

  $fields = array(
    'field_strengths',
    'field_suggestions_and_recommenda',
    'field_relavance',
    'field_scope_pr',
    'field_context',
    'field_scholarship',
  );

  foreach ($fields as $field) {

    if (!empty($peer_review->$field)) {
      return TRUE;
    }
  }

  return FALSE;
}